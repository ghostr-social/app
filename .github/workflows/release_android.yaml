name: Build Android App (Matrix per ABI)

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-android:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        abi: [arm64-v8a, armeabi-v7a, x86, x86_64]
        include:
          - abi: arm64-v8a
            rust_triple: aarch64-linux-android
            clang_target: aarch64-linux-android21
          - abi: armeabi-v7a
            rust_triple: armv7-linux-androideabi
            clang_target: armv7-linux-androideabi21
          - abi: x86
            rust_triple: i686-linux-android
            clang_target: i686-linux-android21
          - abi: x86_64
            rust_triple: x86_64-linux-android
            clang_target: x86_64-linux-android21

    steps:
      # 1) Check out the repository
      - name: Check out code
        uses: actions/checkout@v3

      # 2) Install Dependencies
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            git \
            wget \
            curl \
            unzip \
            nasm \
            yasm \
            pkg-config

      # 3) Set up Java
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 4) Set up Android SDK (installing a default or specified API level)
      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 33

      # 5) Accept Android SDK licenses
      - name: Accept licenses
        run: yes | sdkmanager --licenses

      # 6) Automatically detect the highest available NDK version
      - name: Find installed NDK
        id: find-ndk
        run: |
          echo "Installed NDKs at: $ANDROID_SDK_ROOT/ndk"
          ls -1 "$ANDROID_SDK_ROOT/ndk" || true
          NDK_PATH="$(ls -d $ANDROID_SDK_ROOT/ndk/* | sort -V | tail -n1)"
          echo "NDK_PATH=$NDK_PATH" >> $GITHUB_ENV

      # 7) Set up Flutter
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # 8) Install Rust stable
      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # 9) Install cargo-ndk
      - name: Install cargo-ndk
        run: |
          cargo install cargo-ndk

      # 10) [Optional] Ensure Android Rust targets are added
      - name: Add Android Rust targets
        run: |
          rustup target add \
            aarch64-linux-android \
            armv7-linux-androideabi \
            i686-linux-android \
            x86_64-linux-android

      # 11) (Optional) Configure bindgen to use the correct sysroot.
      - name: Configure bindgen for each ABI
        run: |
          echo "BINDGEN_EXTRA_CLANG_ARGS_${{ matrix.rust_triple//-/_ }}=--sysroot=$NDK_PATH/toolchains/llvm/prebuilt/linux-x86_64/sysroot --target=${{ matrix.clang_target }}" >> $GITHUB_ENV

      # 12) Build FFmpeg for each ABI (matrix)
      - name: Build FFmpeg for ${{ matrix.abi }}
        run: |
          export NDK="$NDK_PATH"
          bash scripts/build_ffmpeg_on_linux_for_android.sh \
               "$PWD/3rd-party/ffmpeg-libs" "${{ matrix.abi }}"

      # 13) Build your Rust library for each ABI
      - name: Build Rust library ${{ matrix.abi }}
        run: |
          export FFMPEG_LIBS_PATH="$PWD/3rd-party/ffmpeg-libs"
          # cargo ndk picks up the right compiler using "-t <ABI>"
          cargo ndk -t ${{ matrix.abi }} build --release --target ${{ matrix.rust_triple }}

      # 14) Build Flutter APK for each ABI
      - name: Build Flutter APK for ${{ matrix.abi }}
        run: |
          flutter pub get

          # Build a single-ABI APK
          case "${{ matrix.abi }}" in
            arm64-v8a)
              flutter build apk --release --target-platform android-arm64
              ;;
            armeabi-v7a)
              flutter build apk --release --target-platform android-arm
              ;;
            x86)
              flutter build apk --release --target-platform android-x86
              ;;
            x86_64)
              flutter build apk --release --target-platform android-x64
              ;;
          esac

      # 15) Upload the resulting APK as an artifact
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "android-apk-${{ matrix.abi }}"
          path: build/app/outputs/flutter-apk/**/*.apk
